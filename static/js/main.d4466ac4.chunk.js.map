{"version":3,"sources":["components/Clima.js","pages/Home.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Clima","props","datos","meses","Array","f","Date","fecha","getDate","getMonth","getFullYear","Card","Container","Row","Col","className","xs","sm","md","lg","xl","style","fontSize","color","width","Img","variant","thumbnail","src","weather","icon","Body","Title","name","description","Text","span","offset","translate","parseInt","main","temp_min","temp","temp_max","humidity","Spinner","animation","Home","useState","dataClima","setClima","useEffect","a","fetch","response","json","data","fetchAPI","About","App","to","Button","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4466ac4.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card,Button,Spinner,Col,Row, Container} from 'react-bootstrap'\r\nexport default function Clima(props){\r\n    const {datos} =props\r\n    let meses = new Array (\"Enero\",\"Febrero\",\"Marzo\",\"Abril\",\"Mayo\",\"Junio\",\"Julio\",\"Agosto\",\"Septiembre\",\"Octubre\",\"Noviembre\",\"Diciembre\");\r\n    let f=new Date();\r\n    let fecha=f.getDate() + \" de \" + meses[f.getMonth()] + \" de \" + f.getFullYear()\r\n    return(\r\n        datos!=\"\"?\r\n        <div>\r\n            <Card >\r\n                <Container>\r\n                <Row>\r\n                    <Col className=\"text-right\" xs={12} sm={12} md={12} lg={12} xl={12}><p style={{fontSize:\"13px\",color:\"grey\"}} className=\"mb-0\">{fecha}</p></Col>\r\n                </Row>\r\n                </Container>\r\n                <div className=\"mx-auto d-block\">\r\n                    <div  style={{width:\"120px\"}}>\r\n                        <Card.Img variant=\"top\" thumbnail=\"true\" src={`https://openweathermap.org/img/wn/${datos.weather[0].icon}@2x.png`}/>\r\n                    </div>\r\n                </div>\r\n            <Card.Body className=\"pt-0\">\r\n                <Card.Title>\r\n                    <div className=\"d-inline-block\">\r\n                        <h1>{datos.name}</h1>\r\n                    </div>\r\n                    <div className=\"d-inline-block\">\r\n                        <sup>({datos.weather[0].description})</sup>\r\n                    </div>\r\n                </Card.Title>\r\n                    <Card.Text>\r\n                        <Row className=\"mt-4\">\r\n                            <Col className=\"mt-3\" xs={3} sm={{span:2,offset:2}} md={{span:2,offset:2}} lg={{span:2,offset:2}} xl={{span:2,offset:2}}>\r\n                                <p style={{fontSize:\"13px\"}}>Min</p>\r\n                                <h4 translate=\"no\">{parseInt(datos.main.temp_min)}<sup>c°</sup></h4>\r\n                            </Col>\r\n                            <Col xs={6} sm={4} md={4} lg={4} xl={4}>\r\n                                <p style={{fontSize:\"13px\"}} >Temperatura</p>\r\n                                <h2 translate=\"no\">{parseInt(datos.main.temp)}<sup>c°</sup></h2>\r\n                            </Col>\r\n                            <Col className=\"mt-3\" xs={3} sm={2} md={2} lg={2} xl={2}>\r\n                                <p style={{fontSize:\"13px\"}}>Max</p>\r\n                                <h4 translate=\"no\">{parseInt(datos.main.temp_max)}<sup>c°</sup></h4>\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"mt-3\">\r\n                            <p>Humedad:{datos.main.humidity}%</p>\r\n                        </div>\r\n                    </Card.Text>\r\n            </Card.Body>\r\n            </Card>\r\n        </div>\r\n        :\r\n        <Row className=\"mt-5\">\r\n            <Col sm={3} md={3} lg={3} xl={3}>\r\n            </Col>\r\n            <Col sm={6} md={6} lg={6} xl={6}>\r\n                <Spinner animation=\"border\" variant=\"success\" />\r\n            </Col>\r\n            <Col sm={3} md={3} lg={3} xl={3}>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport Clima from '../components/Clima'\r\nimport {Row,Col, Container} from 'react-bootstrap'\r\n\r\nexport default function Home() {\r\n    const [dataClima,setClima]=useState([])\r\n\r\n    useEffect(()=>{\r\n    async function fetchAPI(){\r\n        const response=await fetch('https://api.openweathermap.org/data/2.5/weather?lat=20.887476&lon=-89.747641&appid=3a52b3d33721181314ec4880cd66f8f3&lang=sp&units=metric')\r\n        const data=await response.json();\r\n        setClima(data);\r\n    }\r\n    fetchAPI()\r\n    },[])\r\n\r\n    return(\r\n        <Container  className=\"mt-4\">\r\n            <Row>\r\n                <Col xs={1} sm={1} md={2} lg={3} xl={3}>\r\n                </Col>\r\n                <Col xs={10} sm={10} md={8} lg={6} xl={6}>\r\n                    <Clima datos={dataClima} />\r\n                </Col>\r\n                <Col xs={1} sm={1} md={2} lg={2} xl={3}>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )    \r\n}","import React from 'react';\r\n\r\nexport default function About(){\r\n    return(\r\n        <div className=\"mt-5\"><p style={{color:\"white\"}}>DesarrollosRK@gmail.com</p></div>\r\n    )\r\n}","import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport {BrowserRouter as Router, Route, Switch, Link} from \"react-router-dom\";\nimport './App.css';\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\"\nfunction App() {\n\n  return (\n    <div className=\"App mt-2\">\n      <h1>Bienvenido</h1>\n      <Router>\n        <Link to=\"/\">\n          <Button variant=\"success\">Home</Button>{' '}\n        </Link>\n        <Link to=\"/about\">\n          <Button variant=\"info\">About</Button>\n        </Link>\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch> \n      </Router> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}